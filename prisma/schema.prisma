datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified Boolean?
  image         String?
  accounts      Account[]
  password      String?
  sessions      Session[]
  profile       Profile?
  messages      Message[]
  conversations ConversationParticipant[]
  createdGroups Group[]              @relation("GroupCreator")

  sentRequests     FriendRequest[] @relation("SentRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")
             

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  

  StarConversation StarConversation[]


  Group Group[] @relation("GroupAdmin")

  UnreadMessage UnreadMessage[]



  friendshipsInitiated Friendship[] @relation("UserFriendship2")

  friendshipsReceived   Friendship[] @relation("UserFriendship1")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  refreshToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  bio       String?
  firstName String?
  lastName String?
  nickname  String?
  phoneNumber String?
  gender        Gender @default(MALE)
  birthDay DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profilePicture String?
  userId    String   @db.ObjectId @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  coverPicture String?
  blockedUsers  Block[]  @relation("Blocker")
  blockedBy     Block[]  @relation("Blocked")
  privacy Privacy?

  StarredMessage StarredMessage[]

}

model Message {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId 
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  type      ChatType @default(DIRECT)

  // Relations
  userId         String       @db.ObjectId
  user           User         @relation(fields: [userId], references: [id])
  conversationId String       @db.ObjectId 
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  editableUntil DateTime  @default(now())
  

  StarredMessage StarredMessage[]
}

model StarredMessage {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  profileId     String   @db.ObjectId
  profile       Profile     @relation(fields: [profileId], references: [id])
  messageId  String   @db.ObjectId
  message    Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([profileId, messageId]) // Ensures a user can only star a message once
}

model Conversation {
 id            String          @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  messages    Message[]
  participants ConversationParticipant[]
  groupId        String?      @db.ObjectId
  group          Group?       @relation(fields: [groupId], references: [id])

  StarConversation StarConversation[]
  unreadStates UnreadMessage[] 
}

model UnreadMessage {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  conversation  Conversation @relation(fields: [conversationId], references: [id])
  conversationId String      @db.ObjectId
  user          User         @relation(fields: [userId], references: [id])
  userId        String       @db.ObjectId
  lastReadAt    DateTime     @default(now())
  unreadCount   Int          @default(0)

  @@unique([conversationId, userId])
}

model StarConversation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
   userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  conversationId  String   @db.ObjectId
  conversation    Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt DateTime @default(now())
}

model ConversationParticipant {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Relations
  userId         String       @db.ObjectId 
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversationId String      @db.ObjectId  
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  groupId        String?      @db.ObjectId
  group          Group?       @relation(fields: [groupId], references: [id])
  groupRole      GroupRole?    @default(PARTICIPANT)

  @@unique([userId, conversationId])
}



model Group {
 id            String          @id @default(auto()) @map("_id") @db.ObjectId

  name                 String
  groupImage           String?
  disappearingMessages DisappearingMessages @default(OFF)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @default(now())
  descriptions String?
  
  // Relations
  creatorId String   @db.ObjectId
  creator   User     @relation("GroupCreator", fields: [creatorId], references: [id])
  adminId   String   @db.ObjectId
  admin     User  @relation("GroupAdmin", fields: [adminId], references: [id], onDelete: Cascade)
  participants ConversationParticipant[]

  Conversation Conversation[]
}

model FriendRequest {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId

  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId

  sender     User     @relation("SentRequests", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedRequests", fields: [receiverId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt    DateTime @default(now())

}
model Friendship  {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId

  user1Id       String   @db.ObjectId
  user2Id       String   @db.ObjectId

  user1         User     @relation("UserFriendship1", fields: [user1Id], references: [id], onDelete: Cascade)
  user2         User     @relation("UserFriendship2", fields: [user2Id], references: [id], onDelete: Cascade)

  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  

  @@unique([user1Id, user2Id])
}

model Block {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId

  blockerId   String   @db.ObjectId
  blockedId   String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  // Relations
  blocker     Profile  @relation("Blocker", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked     Profile  @relation("Blocked", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
}

model Privacy {
 id            String          @id @default(auto()) @map("_id") @db.ObjectId

  profileId String @db.ObjectId @unique
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  disappearingMessages DisappearingMessages @default(OFF)
  lastSeen LastSeen @default(EVERYONE)
  precense Precense @default(EVERYONE)

  readReciept Boolean @default(false)

}

enum DisappearingMessages {
  OFF
  DAYS90
  DAYS7
  H24
}

enum LastSeen {
  EVERYONE
  MYCONTACTS
  NOBODY
}

enum Precense {
  EVERYONE
  NOBODY
}

enum Gender {
  MALE
  FEMALE
  OTHERS
}

enum ChatType {
  DIRECT
  GROUP
}

enum GroupRole {
  PARTICIPANT
  ADMIN
}